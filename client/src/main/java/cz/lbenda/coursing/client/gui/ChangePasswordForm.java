/*
 * Copyright 2014 Lukas Benda <lbenda at lbenda.cz>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package cz.lbenda.coursing.client.gui;

import cz.lbenda.coursing.client.ClientServiceLocator;
import cz.lbenda.coursing.service.SecurityService;
import cz.lbenda.coursing.user.User;
import java.awt.Color;
import java.util.Arrays;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.NbBundle.Messages;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Lukas Benda <lbenda at lbenda.cz>
 */
@Messages({
  "CTL_ChangePasswordForm=Change password",
  "ERR_TheNewPasswordIsntValid=The new password, or repeated password isn't valid"
})
public class ChangePasswordForm extends javax.swing.JPanel {

  private static final Logger LOG = LoggerFactory.getLogger(ChangePasswordForm.class);

  private static final int MIN_SIZE = 5; // TODO create password validator for better validation

  /**
   * Creates new form ChangePasswordForm
   */
  public ChangePasswordForm() {
    initComponents();

    pfNew.getDocument().addDocumentListener(documentListener);
    pfRepeat.getDocument().addDocumentListener(documentListener);
  }

  private final DocumentListener documentListener = new DocumentListener() {
    @Override public void insertUpdate(DocumentEvent e) { setValidityStar(); }
    @Override public void removeUpdate(DocumentEvent e) { setValidityStar(); }
    @Override public void changedUpdate(DocumentEvent e) { setValidityStar(); }
  };

  private void setValidityStar() {
    if (pfNew.getPassword().length >= MIN_SIZE) { lStarNew.setForeground(Color.GREEN); }
    else { lStarNew.setForeground(Color.RED); }
    if (Arrays.equals(pfNew.getPassword(), pfRepeat.getPassword())) { lStarRepeat.setForeground(Color.GREEN); }
    else { lStarRepeat.setForeground(Color.RED); }
  }

  public boolean isSaveEnabled() {
    boolean saveEanbled = true;
    if (pfNew.getPassword().length < MIN_SIZE) { saveEanbled = false; }
    if (!Arrays.equals(pfNew.getPassword(), pfRepeat.getPassword())) { saveEanbled = false; }
    return saveEanbled;
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    lOld = new javax.swing.JLabel();
    lNew = new javax.swing.JLabel();
    lRepeat = new javax.swing.JLabel();
    pfOld = new javax.swing.JPasswordField();
    pfNew = new javax.swing.JPasswordField();
    pfRepeat = new javax.swing.JPasswordField();
    lStarNew = new javax.swing.JLabel();
    lStarRepeat = new javax.swing.JLabel();

    org.openide.awt.Mnemonics.setLocalizedText(lOld, org.openide.util.NbBundle.getMessage(ChangePasswordForm.class, "ChangePasswordForm.lOld.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(lNew, org.openide.util.NbBundle.getMessage(ChangePasswordForm.class, "ChangePasswordForm.lNew.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(lRepeat, org.openide.util.NbBundle.getMessage(ChangePasswordForm.class, "ChangePasswordForm.lRepeat.text")); // NOI18N

    pfOld.setText(org.openide.util.NbBundle.getMessage(ChangePasswordForm.class, "ChangePasswordForm.pfOld.text")); // NOI18N

    pfNew.setText(org.openide.util.NbBundle.getMessage(ChangePasswordForm.class, "ChangePasswordForm.pfNew.text")); // NOI18N

    pfRepeat.setText(org.openide.util.NbBundle.getMessage(ChangePasswordForm.class, "ChangePasswordForm.pfRepeat.text")); // NOI18N

    lStarNew.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
    lStarNew.setForeground(new java.awt.Color(255, 0, 0));
    org.openide.awt.Mnemonics.setLocalizedText(lStarNew, org.openide.util.NbBundle.getMessage(ChangePasswordForm.class, "ChangePasswordForm.lStarNew.text")); // NOI18N

    lStarRepeat.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
    lStarRepeat.setForeground(new java.awt.Color(255, 0, 0));
    org.openide.awt.Mnemonics.setLocalizedText(lStarRepeat, org.openide.util.NbBundle.getMessage(ChangePasswordForm.class, "ChangePasswordForm.lStarRepeat.text")); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(lNew)
          .addComponent(lRepeat)
          .addComponent(lOld))
        .addGap(7, 7, 7)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(pfOld, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(pfNew)
              .addComponent(pfRepeat))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(lStarNew)
              .addComponent(lStarRepeat))))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(lOld)
          .addComponent(pfOld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(lNew)
          .addComponent(pfNew, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(lStarNew))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(lRepeat)
          .addComponent(pfRepeat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(lStarRepeat))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel lNew;
  private javax.swing.JLabel lOld;
  private javax.swing.JLabel lRepeat;
  private javax.swing.JLabel lStarNew;
  private javax.swing.JLabel lStarRepeat;
  private javax.swing.JPasswordField pfNew;
  private javax.swing.JPasswordField pfOld;
  private javax.swing.JPasswordField pfRepeat;
  // End of variables declaration//GEN-END:variables

  public boolean isNewPasswordValid() {
    return pfNew.getPassword().length >= MIN_SIZE && // FIXME remove constatn and add it to configuration
            Arrays.equals(pfNew.getPassword(), pfRepeat.getPassword());
  }

  public char[] getOldPassword() {
    return pfOld.getPassword();
  }

  public char[] getNewPassword() {
    return pfNew.getPassword();
  }

  public static void showDialog(final User user) {
    final ChangePasswordForm form = new ChangePasswordForm();
    NotifyDescriptor nd = new NotifyDescriptor.Confirmation(form, Bundle.CTL_ChangePasswordForm(),
            NotifyDescriptor.OK_CANCEL_OPTION);
    if (NotifyDescriptor.OK_OPTION.equals(DialogDisplayer.getDefault().notify(nd))) {
      if (form.isSaveEnabled()) {
        SecurityService ss = (SecurityService) ClientServiceLocator.getInstance().getBean(SecurityService.class);
        ss.changePassword(user, form.getOldPassword(), form.getNewPassword());
      } else {
        nd = new NotifyDescriptor.Message(Bundle.ERR_TheNewPasswordIsntValid(),
                NotifyDescriptor.ERROR_MESSAGE);
        DialogDisplayer.getDefault().notify(nd);
      }
    }
  }
}
