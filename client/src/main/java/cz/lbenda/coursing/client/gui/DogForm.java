/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.lbenda.coursing.client.gui;

import cz.lbenda.coursing.client.ClientServiceLocator;
import cz.lbenda.coursing.common.GenderType;
import cz.lbenda.coursing.dto.Breed;
import cz.lbenda.coursing.dto.Dog;
import cz.lbenda.coursing.service.BreedService;
import cz.lbenda.coursing.service.DogService;
import java.awt.BorderLayout;
import java.beans.Customizer;
import java.util.HashSet;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.ListDataListener;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.NbBundle.Messages;

/** Form and customizer for DOG entity
 * @author Lukas Benda <lbenda at lbenda.cz>
 */
@Messages({
  "GenderType.MAN=Man",
  "GenderType.WOMAN=Woman"
})
public class DogForm extends javax.swing.JPanel implements Customizer {

  private DTOPanel dtoPanel;

  /**
   * Creates new form DogForm
   */
  public DogForm() {
    initComponents();
    initComponentsDTO();
    initComboBoxValues();
  }

  private void initComponentsDTO() {
    pDTO.setLayout(new BorderLayout());
    dtoPanel = new DTOPanel();
    pDTO.add(dtoPanel, BorderLayout.CENTER);
  }

  private void initComboBoxValues() {
    DefaultComboBoxModel cbm = new DefaultComboBoxModel();
    cbm.addElement(GenderType.MAN);
    cbm.addElement(GenderType.WOMAN);
    this.cbGender.setModel(cbm);
    this.cbBreed.setModel(new BreedComboBoxModel());
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane1 = new javax.swing.JScrollPane();
    taComment = new javax.swing.JTextArea();
    pDTO = new javax.swing.JPanel();
    jPanel2 = new javax.swing.JPanel();
    lName = new javax.swing.JLabel();
    tfName = new javax.swing.JTextField();
    lBreed = new javax.swing.JLabel();
    cbBreed = new javax.swing.JComboBox();
    lGender = new javax.swing.JLabel();
    cbGender = new javax.swing.JComboBox();
    lLicenceNumber = new javax.swing.JLabel();
    tfLicenceNumber = new javax.swing.JTextField();
    dcBirthday = new com.toedter.calendar.JDateChooser();
    lComment = new javax.swing.JLabel();
    lBirthday = new javax.swing.JLabel();

    taComment.setColumns(20);
    taComment.setRows(5);
    jScrollPane1.setViewportView(taComment);

    pDTO.setMaximumSize(new java.awt.Dimension(32767, 60));
    pDTO.setMinimumSize(new java.awt.Dimension(100, 60));
    pDTO.setPreferredSize(new java.awt.Dimension(0, 60));

    javax.swing.GroupLayout pDTOLayout = new javax.swing.GroupLayout(pDTO);
    pDTO.setLayout(pDTOLayout);
    pDTOLayout.setHorizontalGroup(
      pDTOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );
    pDTOLayout.setVerticalGroup(
      pDTOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 86, Short.MAX_VALUE)
    );

    org.openide.awt.Mnemonics.setLocalizedText(lName, org.openide.util.NbBundle.getMessage(DogForm.class, "DogForm.lName.text")); // NOI18N

    tfName.setText(org.openide.util.NbBundle.getMessage(DogForm.class, "DogForm.tfName.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(lBreed, org.openide.util.NbBundle.getMessage(DogForm.class, "DogForm.lBreed.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(lGender, org.openide.util.NbBundle.getMessage(DogForm.class, "DogForm.lGender.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(lLicenceNumber, org.openide.util.NbBundle.getMessage(DogForm.class, "DogForm.lLicenceNumber.text")); // NOI18N

    tfLicenceNumber.setText(org.openide.util.NbBundle.getMessage(DogForm.class, "DogForm.tfLicenceNumber.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(lComment, org.openide.util.NbBundle.getMessage(DogForm.class, "DogForm.lComment.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(lBirthday, org.openide.util.NbBundle.getMessage(DogForm.class, "DogForm.lBirthday.text")); // NOI18N

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(lLicenceNumber)
              .addComponent(lName)
              .addComponent(lBreed)
              .addComponent(lGender)
              .addComponent(lBirthday))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(dcBirthday, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(tfName, javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(tfLicenceNumber)
              .addComponent(cbGender, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(cbBreed, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addComponent(lComment)
            .addGap(0, 0, Short.MAX_VALUE)))
        .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(lName))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(lBreed, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(cbBreed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(3, 3, 3)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(lGender)
          .addComponent(cbGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(tfLicenceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(lLicenceNumber))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addComponent(dcBirthday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(32, 32, 32))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
            .addComponent(lBirthday)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(lComment)
            .addGap(6, 6, 6))))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
        .addContainerGap())
      .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(pDTO, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(pDTO, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
    );
  }// </editor-fold>//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox cbBreed;
  private javax.swing.JComboBox cbGender;
  private com.toedter.calendar.JDateChooser dcBirthday;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JLabel lBirthday;
  private javax.swing.JLabel lBreed;
  private javax.swing.JLabel lComment;
  private javax.swing.JLabel lGender;
  private javax.swing.JLabel lLicenceNumber;
  private javax.swing.JLabel lName;
  private javax.swing.JPanel pDTO;
  private javax.swing.JTextArea taComment;
  private javax.swing.JTextField tfLicenceNumber;
  private javax.swing.JTextField tfName;
  // End of variables declaration//GEN-END:variables

  private Dog dog;

  @Override
  public void setObject(Object bean) {
    setDog((Dog) bean);
  }

  public void setDog(Dog dog) {
    this.dog = dog;
    tfName.setText(dog.getName());
    lLicenceNumber.setText(dog.getLicenceNumber());
    dcBirthday.setDate(dog.getBirthdate());
    cbGender.setSelectedItem(dog.getGenderType());
    cbBreed.setSelectedItem(dog.getBreed());
    taComment.setText(dog.getComment());
    this.dtoPanel.setDTO(dog);
  }

  public Dog getDog() {
    dog.setName(tfName.getText());
    dog.setLicenceNumber(tfLicenceNumber.getText());
    dog.setBirthdate(dcBirthday.getDate());
    dog.setBreed((Breed) cbBreed.getSelectedItem());
    dog.setGenderType((GenderType) cbGender.getSelectedItem());
    dog.setComment(taComment.getText());
    return dog;
  }

  public static void showDialog(Dog dog) {
    final DogForm form = new DogForm();
    form.setDog(dog);
    NotifyDescriptor nd = new NotifyDescriptor.Confirmation(form, Bundle.CTL_ChangePasswordForm(),
            NotifyDescriptor.OK_CANCEL_OPTION);
    if (NotifyDescriptor.OK_OPTION.equals(DialogDisplayer.getDefault().notify(nd))) {
      DogService ss = (DogService) ClientServiceLocator.getInstance().getBean(DogService.class);
      ss.save(form.getDog());
    }
  }

  private static class BreedComboBoxModel implements ComboBoxModel<Breed> {
    private final HashSet<ListDataListener> listDataListeners = new HashSet<>();
    private List<Breed> breeds;
    private Breed breed;
    private List<Breed> breeds() {
      if (breeds == null) {
        BreedService bs = ClientServiceLocator.getInstance().getBean(BreedService.class);
        breeds = bs.allEntities();
      }
      return breeds;
    }

    public @Override void setSelectedItem(Object anItem) {
      this.breed = (Breed) anItem;
      /*for (ListDataListener ldl : listDataListeners) {
        ldl.
      }*/
    }
    public @Override Object getSelectedItem() { return (Breed) breed; }
    public @Override int getSize() { return breeds().size(); }
    public @Override Breed getElementAt(int index) { return breeds().get(index); }
    public @Override void addListDataListener(ListDataListener l) { listDataListeners.add(l); }
    public @Override void removeListDataListener(ListDataListener l) { listDataListeners.remove(l); }
  }
}
