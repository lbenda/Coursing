/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.lbenda.coursing.client.gui;

import cz.lbenda.common.IntegerHelper;
import cz.lbenda.coursing.client.ClientServiceLocator;
import cz.lbenda.coursing.dto.DogLap;
import cz.lbenda.coursing.service.DogLapService;
import java.awt.BorderLayout;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.NbBundle.Messages;

/**
 *
 * @author Lukas Benda <lbenda at lbenda.cz>
 */
@Messages({
  "DLG_DogLapForm_Save=Save result of dog"
})
public class DogLapForm extends javax.swing.JPanel {

  private DTOPanel dtoPanel;
  private final DogLap dogLap;

  /**
   * Creates new form DogLapForm
   */
  public DogLapForm(DogLap dogLap) {
    initComponents();
    initComponentsDTO();
    this.dogLap = dogLap;

    dtoPanel.setDTO(dogLap);
    tfAgility.setText(IntegerHelper.integerToString(dogLap.getAgility()));
    tfEndurance.setText(IntegerHelper.integerToString(dogLap.getEndurance()));
    tfEnthusiasm.setText(IntegerHelper.integerToString(dogLap.getEnthusiasm()));
    tfSpeed.setText(IntegerHelper.integerToString(dogLap.getSpeed()));
  }

  private void initComponentsDTO() {
    pDTO.setLayout(new BorderLayout());
    dtoPanel = new DTOPanel();
    pDTO.add(dtoPanel, BorderLayout.CENTER);
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    pDTO = new javax.swing.JPanel();
    lAgility = new javax.swing.JLabel();
    lEndurance = new javax.swing.JLabel();
    lEnthusiasm = new javax.swing.JLabel();
    lSpeed = new javax.swing.JLabel();
    tfAgility = new javax.swing.JTextField();
    tfEndurance = new javax.swing.JTextField();
    tfEnthusiasm = new javax.swing.JTextField();
    tfSpeed = new javax.swing.JTextField();

    pDTO.setMaximumSize(new java.awt.Dimension(32767, 60));
    pDTO.setMinimumSize(new java.awt.Dimension(100, 60));
    pDTO.setPreferredSize(new java.awt.Dimension(0, 60));

    javax.swing.GroupLayout pDTOLayout = new javax.swing.GroupLayout(pDTO);
    pDTO.setLayout(pDTOLayout);
    pDTOLayout.setHorizontalGroup(
      pDTOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 400, Short.MAX_VALUE)
    );
    pDTOLayout.setVerticalGroup(
      pDTOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 60, Short.MAX_VALUE)
    );

    org.openide.awt.Mnemonics.setLocalizedText(lAgility, org.openide.util.NbBundle.getMessage(DogLapForm.class, "DogLapForm.lAgility.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(lEndurance, org.openide.util.NbBundle.getMessage(DogLapForm.class, "DogLapForm.lEndurance.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(lEnthusiasm, org.openide.util.NbBundle.getMessage(DogLapForm.class, "DogLapForm.lEnthusiasm.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(lSpeed, org.openide.util.NbBundle.getMessage(DogLapForm.class, "DogLapForm.lSpeed.text")); // NOI18N

    tfAgility.setText(org.openide.util.NbBundle.getMessage(DogLapForm.class, "DogLapForm.tfAgility.text")); // NOI18N

    tfEndurance.setText(org.openide.util.NbBundle.getMessage(DogLapForm.class, "DogLapForm.tfEndurance.text")); // NOI18N

    tfEnthusiasm.setText(org.openide.util.NbBundle.getMessage(DogLapForm.class, "DogLapForm.tfEnthusiasm.text")); // NOI18N

    tfSpeed.setText(org.openide.util.NbBundle.getMessage(DogLapForm.class, "DogLapForm.tfSpeed.text")); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(pDTO, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(lEndurance)
              .addComponent(lAgility))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(tfEndurance)
              .addComponent(tfAgility)))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(lEnthusiasm)
              .addComponent(lSpeed))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(tfSpeed)
              .addComponent(tfEnthusiasm))))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(pDTO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(lAgility)
          .addComponent(tfAgility, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(lEndurance)
          .addComponent(tfEndurance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(lEnthusiasm)
          .addComponent(tfEnthusiasm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(lSpeed)
          .addComponent(tfSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel lAgility;
  private javax.swing.JLabel lEndurance;
  private javax.swing.JLabel lEnthusiasm;
  private javax.swing.JLabel lSpeed;
  private javax.swing.JPanel pDTO;
  private javax.swing.JTextField tfAgility;
  private javax.swing.JTextField tfEndurance;
  private javax.swing.JTextField tfEnthusiasm;
  private javax.swing.JTextField tfSpeed;
  // End of variables declaration//GEN-END:variables

  private DogLap getDogLap() {
    dogLap.setAgility(IntegerHelper.stringToInteger(tfAgility.getText()));
    dogLap.setEndurance(IntegerHelper.stringToInteger(tfEndurance.getText()));
    dogLap.setEnthusiasm(IntegerHelper.stringToInteger(tfEnthusiasm.getText()));
    dogLap.setSpeed(IntegerHelper.stringToInteger(tfSpeed.getText()));
    return dogLap;
  }

  public static void showDialog(DogLap dogLap) {
    final DogLapForm form = new DogLapForm(dogLap);
    NotifyDescriptor nd = new NotifyDescriptor.Confirmation(form, Bundle.DLG_DogLapForm_Save(),
            NotifyDescriptor.OK_CANCEL_OPTION);
    if (NotifyDescriptor.OK_OPTION.equals(DialogDisplayer.getDefault().notify(nd))) {
      DogLapService dogLapService = ClientServiceLocator.getInstance().getBean(DogLapService.class);
      dogLapService.save(form.getDogLap());
    }
  }
}
