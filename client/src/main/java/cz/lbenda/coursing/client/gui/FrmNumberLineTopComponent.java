/*
 * Copyright 2014 Lukas Benda <lbenda at lbenda.cz>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package cz.lbenda.coursing.client.gui;

import cz.lbenda.coursing.client.ClientServiceLocator;
import cz.lbenda.coursing.client.gui.action.DTOAddCookie;
import cz.lbenda.coursing.client.gui.action.DTODelCookie;
import cz.lbenda.coursing.dto.Breed;
import cz.lbenda.coursing.dto.DTO;
import cz.lbenda.coursing.dto.NumberLine;
import cz.lbenda.coursing.dto.RaceType;
import cz.lbenda.coursing.service.AbstractDTOService;
import cz.lbenda.coursing.service.BreedService;
import cz.lbenda.coursing.service.RaceTypeService;
import java.awt.BorderLayout;
import java.beans.IntrospectionException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.Action;
import javax.swing.JTable;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.cookies.OpenCookie;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.OutlineView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.BeanNode;
import org.openide.nodes.ChildFactory;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.TopComponent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//cz.lbenda.coursing.client.gui//FrmNumberLine//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "FrmNumberLineTopComponent",
        iconBase = "cz/lbenda/coursing/client/icon/list.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "cz.lbenda.coursing.client.gui.FrmNumberLineTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_FrmNumberLineAction",
        preferredID = "FrmNumberLineTopComponent"
)
@Messages({
  "CTL_FrmNumberLineAction=Number line",
  "CTL_FrmNumberLineTopComponent=Number line",
  "HINT_FrmNumberLineTopComponent=List of all number lines",
  "CTL_NumberLine_Breed=Breed",
  "CTL_NumberLine_RaceType=Race type"
})
public final class FrmNumberLineTopComponent extends TopComponent implements ExplorerManager.Provider {

  private static final Logger LOG = LoggerFactory.getLogger(FrmNumberLineTopComponent.class);
  private final ExplorerManager em = new ExplorerManager();
  private final OutlineView ov;
  private final InstanceContent ic = new InstanceContent();
  private NumberLineTypeChildFactory numberLineTypeChildrenFactory = new NumberLineTypeChildFactory();

  public FrmNumberLineTopComponent() {
    initComponents();
    setName(Bundle.CTL_FrmNumberLineTopComponent());
    setToolTipText(Bundle.HINT_FrmNumberLineTopComponent());

    setLayout(new BorderLayout());
    ov = new OutlineView();
    ov.getOutline().setRootVisible(false);
    ov.getOutline().setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    ColumnCellRenderer ccr = new ColumnCellRenderer();

    ccr.setCentered(false);
    ov.getOutline().setDefaultRenderer(Node.Property.class, ccr);
    add(ov, BorderLayout.CENTER);
    Node rootNode = new AbstractNode(Children.create(numberLineTypeChildrenFactory, true));
    em.setRootContext(rootNode);
    definePropertyAndHint();

    associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
  }

  private void definePropertyAndHint() {
    ov.setPropertyColumns("name", "Name", "comment", "Comment"); // FIXME - localization
    // TODO description of column
  }

  @Override
  public ExplorerManager getExplorerManager() {
    return em;
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 400, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 300, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
  @Override
  public void componentOpened() {
    LOG.debug("componentOpened");
    this.numberLineTypeChildrenFactory.open();
  }

  @Override
  public void componentClosed() {
    LOG.debug("componentClosed");
    this.numberLineTypeChildrenFactory.close();
  }

  void writeProperties(java.util.Properties p) {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    // TODO store your settings
  }

  void readProperties(java.util.Properties p) {
    String version = p.getProperty("version");
    // TODO read your settings according to their version
  }

  private static class NumberLineAddCookieImpl implements DTOAddCookie {
    private final AbstractDTOService as;
    public NumberLineAddCookieImpl(Class<NumberLine> numberLineClass) {
      if (Breed.class.equals(numberLineClass)) {
        as = ClientServiceLocator.getInstance().getBean(BreedService.class);
      } else { /* if (RaceType.class.equals(numberLineClass)) { */
        as = ClientServiceLocator.getInstance().getBean(RaceTypeService.class);
      }
    }
    public @Override AbstractDTOService numberLineService() { return as; }
    public @Override void showForm(DTO dto) { NumberLineForm.showDialog((NumberLine) dto, (AbstractDTOService<NumberLine>) as); }
  }

  public static class NumberLineTypeNode<T extends NumberLine> extends AbstractNode {
    private Class<T> numberLineClass;
    private final NumberLineChildFactory numberLineChildFactory;
    private final NumberLineAddCookieImpl addCookie;
    private final Lookup lookup;
    public NumberLineTypeNode(Class<T> numberLineClass) {
      this(numberLineClass, new NumberLineChildFactory(numberLineClass), new InstanceContent());
    }
    public NumberLineTypeNode(Class<T> numberLineClass, NumberLineChildFactory numberLineChildFactory, final InstanceContent ic) {
      this(numberLineClass, numberLineChildFactory, new AbstractLookup(ic), ic);
    }
    public NumberLineTypeNode(Class<T> numberLineClass, NumberLineChildFactory numberLineChildFactory, final Lookup lookup, final InstanceContent ic) {
      super(Children.create(numberLineChildFactory, true), lookup);
      this.lookup = lookup;
      this.numberLineChildFactory = numberLineChildFactory;
      this.setDisplayName(NbBundle.getMessage(FrmNumberLineTopComponent.class, "CTL_NumberLine_" + numberLineClass.getSimpleName()));
      addCookie = new NumberLineAddCookieImpl((Class<NumberLine>) numberLineClass);
      ic.add(addCookie);
      ic.add(new OpenCookie() {
        @Override
        public void open() {
          throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
      });
    }
    public void open() {
      this.numberLineChildFactory.open();
    }
    public void close() {
      this.numberLineChildFactory.close();
    }
    @Override
    public Action[] getActions(boolean context) {
      List<? extends Action> actions = Utilities.actionsForPath("Actions/Coursing/DTO/Add");
      return actions.toArray(new Action[actions.size()]);
    }
  }

  public static class NumberLineTypeChildFactory extends ChildFactory<Class<? extends NumberLine>> {
    Map<Class, NumberLineTypeNode> factories = new HashMap<>();
    public NumberLineTypeChildFactory() {
      LOG.debug("NumberLineTypeChildFactory - create");
    }
    public final void close() {
      for (NumberLineTypeNode fac : factories.values()) { fac.close(); }
    }
    public final void open() {
      for (NumberLineTypeNode fac : factories.values()) { fac.open(); }
    }
    @Override
    protected  boolean createKeys(List<Class<? extends NumberLine>> toPopulate) {
      LOG.debug("createKeys");
      toPopulate.add(Breed.class);
      toPopulate.add(RaceType.class);
      return true;
    }
    @Override
    protected Node createNodeForKey(Class<? extends NumberLine> key) {
      NumberLineTypeNode node = new NumberLineTypeNode(key);
      factories.put(key, node);
      return node;
    }
  }

  public static class NumberLineNode<T extends NumberLine> extends BeanNode<T> {
    public NumberLineNode(final T numberLine, final Class<T> clazz) throws IntrospectionException {
      this(numberLine, clazz, new InstanceContent());
    }
    public NumberLineNode(final T numberLine, final Class<T> clazz, final InstanceContent ic) throws IntrospectionException {
      super(numberLine, Children.LEAF, new AbstractLookup(ic));
      if (Breed.class.equals(clazz)) {
        ic.add(new DTODelCookie<Breed>() {
          public @Override AbstractDTOService<Breed> numberLineService() {
            return ClientServiceLocator.getInstance().getBean(BreedService.class);
          }
          public @Override Breed removedNumberLine() { return (Breed) numberLine; }
       });
      } else if (RaceType.class.equals(clazz)) {
        ic.add(new DTODelCookie<RaceType>() {
          public @Override AbstractDTOService<RaceType> numberLineService() {
            return ClientServiceLocator.getInstance().getBean(RaceTypeService.class);
          }
          public @Override RaceType removedNumberLine() { return (RaceType) numberLine; }
       });
      }
    }
    @Override
    public Action[] getActions(boolean context) {
      List<? extends Action> actions = Utilities.actionsForPath("Actions/Coursing/DTO/Del");
      return actions.toArray(new Action[actions.size()]);
    }
  }

  public static class NumberLineChildFactory<T extends NumberLine> extends ChildFactory<T> implements AbstractDTOService.DTOChangedListener<T> {
    private final AbstractDTOService<T> numberLineService;
    private final List<T> newNumberLines = new ArrayList<>();
    private final Class<T> clazz;
    public NumberLineChildFactory(Class<T> clazz) {
      LOG.debug("NumberLineChildFactory - create");
      this.clazz = clazz;
      if (Breed.class.equals(clazz)) {
        numberLineService = (AbstractDTOService<T>) ClientServiceLocator.getInstance().getBean(BreedService.class);
      } else if (RaceType.class.equals(clazz)) {
        numberLineService = (AbstractDTOService<T>) ClientServiceLocator.getInstance().getBean(RaceTypeService.class);
      } else { numberLineService = null; }
    }
    public final void close() {
      numberLineService.removeDTOChangedListener(this);
      newNumberLines.clear();
    }
    public final void open() {
      numberLineService.addDTOChangedListener(this);
    }
    @Override
    protected  boolean createKeys(List<T> toPopulate) {
      LOG.debug("createKeys");
      if (toPopulate.isEmpty()) { toPopulate.addAll(numberLineService.allEntities()); } // Adding completely new data
      for (T numberLine : newNumberLines) {
        if (!toPopulate.contains(numberLine)) { toPopulate.add(numberLine); }
      }
      return true;
    }
    @Override
    protected Node createNodeForKey(T key) {
      try {
        return new NumberLineNode(key, clazz);
      } catch (IntrospectionException ex) {
        LOG.error("Faild the creating node of DTO", ex);
      }
      return null;
    }
    @Override
    public void dtoChanged(T oldDTO, T newDTO) {
      LOG.debug("oldDTO, newDTO");
      if (oldDTO == null && !newNumberLines.contains(newDTO)) {
        LOG.debug("refresh");
        newNumberLines.add(newDTO);
        refresh(true);
      }
    }
  }
}
