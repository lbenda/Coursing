/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.lbenda.coursing.client.gui;

import cz.lbenda.coursing.client.ClientServiceLocator;
import cz.lbenda.coursing.dto.Race;
import cz.lbenda.coursing.service.RaceService;
import java.awt.BorderLayout;
import java.beans.IntrospectionException;
import java.util.List;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.BeanNode;
import org.openide.nodes.ChildFactory;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//cz.lbenda.coursing.races//FrmRacesTree//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "FrmRacesTreeTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "cz.lbenda.coursing.races.FrmRacesTreeTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_FrmRacesTreeAction",
        preferredID = "FrmRacesTreeTopComponent"
)
@Messages({
    "CTL_FrmRacesTreeAction=Races",
    "CTL_FrmRacesTreeTopComponent=Races",
    "HINT_FrmRacesTreeTopComponent=List of races",
    "SEC_NotLogged=User ins't logged to application"
})
public final class FrmRacesTreeTopComponent extends TopComponent implements ExplorerManager.Provider{

  private static final Logger LOG = LoggerFactory.getLogger(FrmRacesTreeTopComponent.class);
  private final ExplorerManager em = new ExplorerManager();
  private final BeanTreeView tree;

  public FrmRacesTreeTopComponent() {
    initComponents();
    setName(Bundle.CTL_FrmRacesTreeTopComponent());
    setToolTipText(Bundle.HINT_FrmRacesTreeTopComponent());
    setLayout(new BorderLayout());

    tree = new BeanTreeView();
    AbstractNode root = new AbstractNode(Children.create(new RaceChildFactory(), true));
    tree.setRootVisible(false);
    em.setRootContext(root);
    add(tree, BorderLayout.CENTER);
    associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
  }

  @Override
  public ExplorerManager getExplorerManager() {
    return em;
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 414, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 486, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
  @Override
  public void componentOpened() {
    // TODO add custom code on component opening
    /*
    TreeModel model = jTree1.getModel();
    Object r = model.getRoot();
    DefaultMutableTreeNode presence = (DefaultMutableTreeNode) model.getChild(r, 0);
    DefaultMutableTreeNode currentYear = (DefaultMutableTreeNode) model.getChild(r, 1);
    DefaultMutableTreeNode previousYears = (DefaultMutableTreeNode) model.getChild(r, 2);

    Calendar twoWeeksAgoC = Calendar.getInstance();
    twoWeeksAgoC.add(Calendar.WEEK_OF_YEAR, -2);

    Calendar currentYearC = Calendar.getInstance();
    currentYearC.set(Calendar.MONTH, 1);
    currentYearC.set(Calendar.DAY_OF_YEAR, 1);

    for (Race race : raceService.allEntities()) {
      if (race.getDateOfRace().after(twoWeeksAgoC.getTime())) {
        presence.add(new DefaultMutableTreeNode(String.format("%1$td. %1$tm - %2$s",
                race.getDateOfRace(), race.getName())));
      } else if (race.getDateOfRace().after(currentYearC.getTime())) {
        currentYear.add(new DefaultMutableTreeNode(String.format("%1$td. %1$tm - %2$s",
                race.getDateOfRace(), race.getName())));
      } else {
        previousYears.add(new DefaultMutableTreeNode(String.format("%1%y-%1$tm-%1$td - %2$s",
                race.getDateOfRace(), race.getName())));
      }
    }
            */
  }

  @Override
  public void componentClosed() {
    // TODO add custom code on component closing
  }

  void writeProperties(java.util.Properties p) {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    // TODO store your settings
  }

  void readProperties(java.util.Properties p) {
    String version = p.getProperty("version");
    // TODO read your settings according to their version
  }

  public static class RaceNode extends BeanNode<Race> {
    public RaceNode(Race bean) throws IntrospectionException {
      super(bean);
      setName(bean.getName());
      setShortDescription(bean.getComment());
    }
  }

  public static class RaceChildFactory extends ChildFactory<Object> {
    private final RaceService raceService = ClientServiceLocator.getInstance().getBean(RaceService.class);

    @Override
    protected boolean createKeys(List<Object> toPopulate) {
      for (GrantedAuthority ga : SecurityContextHolder.getContext().getAuthentication().getAuthorities()) {
        LOG.debug("Grathed authority to user: " + ga.getAuthority());
      }
      //try {
        toPopulate.addAll(raceService.allEntities());
      /*}  catch (AuthenticationCredentialsNotFoundException ex) {
        LOG.info("User isn't connected.");
        AbstractNode node = new AbstractNode(Children.LEAF);
        node.setName(Bundle.SEC_NotLogged());
        node.setShortDescription(ex.toString());
        toPopulate.add(node);
      }*/
      return true;
    }

    @Override
    protected Node createNodeForKey(Object key) {
      if (key instanceof Node) {
        return (Node) key;
      } else if (key instanceof Race) {
        try {
          return new RaceNode((Race) key);
        } catch (IntrospectionException ex) {
          LOG.error("Problem with creating race node", ex);
          throw new RuntimeException("Problem with creating race node", ex);
        }
      }
      return null;
    }
  }
}
