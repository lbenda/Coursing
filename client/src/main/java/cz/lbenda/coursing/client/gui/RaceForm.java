/*
 * Copyright 2014 Lukas Benda <lbenda at lbenda.cz>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package cz.lbenda.coursing.client.gui;

import cz.lbenda.coursing.client.ClientServiceLocator;
import cz.lbenda.coursing.client.gui.node.RaceNode;
import cz.lbenda.coursing.dto.Race;
import cz.lbenda.coursing.dto.RaceType;
import cz.lbenda.coursing.service.RaceService;
import cz.lbenda.coursing.service.RaceTypeService;
import java.awt.BorderLayout;
import java.beans.IntrospectionException;
import java.util.HashSet;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.event.ListDataListener;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.BeanTreeView;
import org.openide.util.NbBundle.Messages;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author Lukas Benda <lbenda at lbenda.cz>
 */
@Messages({
  "DLG_RaceForm_Save=Save changes of race?",
  "DN_RaceForm_NodeJudges=Judges",
  "DN_RaceForm_NodeLap=Laps"
})
public class RaceForm extends javax.swing.JPanel implements ExplorerManager.Provider {

  private static final Logger LOG = LoggerFactory.getLogger(RaceForm.class);
  private final ExplorerManager em = new ExplorerManager();
  private final BeanTreeView beanTreeView = new BeanTreeView();
  private DTOPanel dtoPanel;

  /** Creates new form RaceForm */
  public RaceForm() {
    initComponents();
    initComponentsDTO();
    initComboBoxValues();

    pTree.setLayout(new BorderLayout());
    pTree.add(BorderLayout.CENTER, beanTreeView);

    beanTreeView.setRootVisible(false);
    //  associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
  }

  @Override
  public ExplorerManager getExplorerManager() {
    return em;
  }

  private void initComponentsDTO() {
    pDTO.setLayout(new BorderLayout());
    dtoPanel = new DTOPanel();
    pDTO.add(dtoPanel, BorderLayout.CENTER);
  }

  private void initComboBoxValues() {
    this.cbRaceType.setModel(new RaceTypeComboBoxModel());
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    lName = new javax.swing.JLabel();
    lDateOfRace = new javax.swing.JLabel();
    lPlace = new javax.swing.JLabel();
    lRaceType = new javax.swing.JLabel();
    pTree = new javax.swing.JPanel();
    cbRaceType = new javax.swing.JComboBox();
    tfName = new javax.swing.JTextField();
    tfPlace = new javax.swing.JTextField();
    dcDateofRace = new com.toedter.calendar.JDateChooser();
    pDTO = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    taComment = new javax.swing.JTextArea();
    lComment = new javax.swing.JLabel();

    org.openide.awt.Mnemonics.setLocalizedText(lName, org.openide.util.NbBundle.getMessage(RaceForm.class, "RaceForm.lName.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(lDateOfRace, org.openide.util.NbBundle.getMessage(RaceForm.class, "RaceForm.lDateOfRace.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(lPlace, org.openide.util.NbBundle.getMessage(RaceForm.class, "RaceForm.lPlace.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(lRaceType, org.openide.util.NbBundle.getMessage(RaceForm.class, "RaceForm.lRaceType.text")); // NOI18N

    javax.swing.GroupLayout pTreeLayout = new javax.swing.GroupLayout(pTree);
    pTree.setLayout(pTreeLayout);
    pTreeLayout.setHorizontalGroup(
      pTreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 509, Short.MAX_VALUE)
    );
    pTreeLayout.setVerticalGroup(
      pTreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 159, Short.MAX_VALUE)
    );

    tfName.setText(org.openide.util.NbBundle.getMessage(RaceForm.class, "RaceForm.tfName.text")); // NOI18N

    tfPlace.setText(org.openide.util.NbBundle.getMessage(RaceForm.class, "RaceForm.tfPlace.text")); // NOI18N

    pDTO.setMaximumSize(new java.awt.Dimension(32767, 60));
    pDTO.setMinimumSize(new java.awt.Dimension(100, 60));
    pDTO.setPreferredSize(new java.awt.Dimension(0, 60));

    javax.swing.GroupLayout pDTOLayout = new javax.swing.GroupLayout(pDTO);
    pDTO.setLayout(pDTOLayout);
    pDTOLayout.setHorizontalGroup(
      pDTOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );
    pDTOLayout.setVerticalGroup(
      pDTOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 60, Short.MAX_VALUE)
    );

    taComment.setColumns(20);
    taComment.setRows(5);
    jScrollPane1.setViewportView(taComment);

    org.openide.awt.Mnemonics.setLocalizedText(lComment, org.openide.util.NbBundle.getMessage(RaceForm.class, "RaceForm.lComment.text")); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(pDTO, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
      .addComponent(pTree, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(lPlace)
          .addComponent(lName)
          .addComponent(lDateOfRace))
        .addGap(13, 13, 13)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(dcDateofRace, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(lRaceType)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(cbRaceType, 0, 189, Short.MAX_VALUE))
          .addComponent(tfName)
          .addComponent(tfPlace)))
      .addGroup(layout.createSequentialGroup()
        .addComponent(lComment)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      .addComponent(jScrollPane1)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(pDTO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(lName))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(lDateOfRace)
          .addComponent(dcDateofRace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(lRaceType)
            .addComponent(cbRaceType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(tfPlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(lPlace))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(lComment)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(pTree, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox cbRaceType;
  private com.toedter.calendar.JDateChooser dcDateofRace;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JLabel lComment;
  private javax.swing.JLabel lDateOfRace;
  private javax.swing.JLabel lName;
  private javax.swing.JLabel lPlace;
  private javax.swing.JLabel lRaceType;
  private javax.swing.JPanel pDTO;
  private javax.swing.JPanel pTree;
  private javax.swing.JTextArea taComment;
  private javax.swing.JTextField tfName;
  private javax.swing.JTextField tfPlace;
  // End of variables declaration//GEN-END:variables

  private Race race;

  public void setRace(Race race) {
    this.race = race;
    tfName.setText(race.getName());
    tfPlace.setText(race.getPlace());
    dcDateofRace.setDate(race.getDateOfRace());
    taComment.setText(race.getName());
    cbRaceType.setSelectedItem(race.getRaceType());
    dtoPanel.setDTO(race);

    try {
      em.setRootContext(new RaceNode(race));
    } catch (IntrospectionException ex) {
      LOG.error("Problem with open race node", ex);
    }
  }

  public Race getRace() {
    race.setComment(taComment.getText());
    race.setName(tfName.getText());
    race.setPlace(tfPlace.getText());
    race.setDateOfRace(dcDateofRace.getDate());
    race.setRaceType((RaceType) cbRaceType.getSelectedItem());
    return race;
  }

  public static void showDialog(Race race, RaceService raceService) {
    final RaceForm form = new RaceForm();
    form.setRace(race);
    NotifyDescriptor nd = new NotifyDescriptor.Confirmation(form, Bundle.DLG_RaceForm_Save(),
            NotifyDescriptor.OK_CANCEL_OPTION);
    if (NotifyDescriptor.OK_OPTION.equals(DialogDisplayer.getDefault().notify(nd))) {
      raceService.save(form.getRace());
    }
  }

  private static class RaceTypeComboBoxModel implements ComboBoxModel<RaceType> {
    private final HashSet<ListDataListener> listDataListeners = new HashSet<>();
    private List<RaceType> raceTypes;
    private RaceType raceType;
    private List<RaceType> raceTypes() {
      if (raceTypes == null) {
        RaceTypeService rt = ClientServiceLocator.getInstance().getBean(RaceTypeService.class);
        raceTypes = rt.allEntities();
      }
      return raceTypes;
    }

    public @Override void setSelectedItem(Object anItem) {
      this.raceType = (RaceType) anItem;
    }
    public @Override Object getSelectedItem() { return (RaceType) raceType; }
    public @Override int getSize() { return raceTypes().size(); }
    public @Override RaceType getElementAt(int index) { return raceTypes().get(index); }
    public @Override void addListDataListener(ListDataListener l) { listDataListeners.add(l); }
    public @Override void removeListDataListener(ListDataListener l) { listDataListeners.remove(l); }
  }
}
